
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавление команды Создать на основании
//
// Параметры:
// КомандыСозданияНаОсновании - ТаблицаЗначений
// 
// Возвращаемое значение:
//  - СтрокаТаблицыЗначений
//  - Неопределено
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.РеализацияТоваровУслуг) Тогда
		
        КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
        КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.РеализацияТоваровУслуг.ПолноеИмя();
        КомандаСоздатьНаОсновании.Представление = ОбщегоНазначения.ПредставлениеОбъекта(Метаданные.Документы.РеализацияТоваровУслуг);
        КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции

//ВКМ_Доработки: Добавление команды печати Акта об оказанных услугах 
//
//Параметры:
//КомандыПечати - ТаблицаЗначений 
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
		
	// Акт оказанных услуг
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктОказанныхУслуг";
	КомандаПечати.Представление = НСтр("ru = 'Акт оказанных услуг'");
	КомандаПечати.Порядок = 10;
	
КонецПроцедуры
//Конец ВКМ_Доработки

//ВКМ_Доработки: Добавление печатной формы Акта об оказанных услугах
//
//Параметры:
//МассивОбъектов - Массив из ДокументСсылка.РеализацияТоваровУслуг
//ПараметрыПечати - Структура  
//КоллекцияПечатныхФорм - ТаблицаЗначений
//ОбъектыПечати - СписокЗначений из ДокументСсылка.РеализацияТоваровУслуг
//ПараметрыВывода - Структура
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
			
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "АктОказанныхУслуг");
	Если ПечатнаяФорма <> Неопределено Тогда
	    ПечатнаяФорма.ТабличныйДокумент = ПечатьАктаОказанныхУслуг(МассивОбъектов, ОбъектыПечати);
	    ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Акт оказанных услуг'");
	    ПечатнаяФорма.ПолныйПутьКМакету = "Документ.РеализацияТоваровУслуг.ПФ_MXL_АктОказанныхУслуг";
	КонецЕсли;
	
КонецПроцедуры
//Конец ВКМ_Доработки

#КонецОбласти

#Область СлужебныеПроцедурыИФункции 

//ВКМ_Доработки: Добавление функционала по печати Акта об оказанных услугах
Функция ПечатьАктаОказанныхУслуг(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "АктОказанныхУслуг";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияТоваровУслуг.ПФ_MXL_АктОказанныхУслуг");
	ДанныеДокументов = ПолучитьДанныеДокументов(МассивОбъектов);
	ПервыйДокумент = Истина;
	
	Пока ДанныеДокументов.Следующий() Цикл
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		ВывестиЗаголовокАкта(ДанныеДокументов, ТабличныйДокумент, Макет);
		ВывестиОсновнуюТаблицуАкта(ДанныеДокументов, ТабличныйДокумент, Макет);
		
		ДанныеQRКода = ГенерацияШтрихкода.ДанныеQRКода(ДанныеДокументов.Ссылка, 1, 120);
		Если НЕ ТипЗнч(ДанныеQRКода) = Тип("ДвоичныеДанные") Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось сформировать QR-код.
			|Технические подробности см. в журнале регистрации.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Иначе
			КартинкаQRКода = Новый Картинка(ДанныеQRКода);
			Макет.Рисунки.QRКод.Картинка = КартинкаQRКода;
		КонецЕсли;
		
		ВывестиПодвалАкта(ДанныеДокументов, ТабличныйДокумент, Макет);
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
		НомерСтрокиНачало, ОбъектыПечати, ДанныеДокументов.Ссылка);		
	КонецЦикла;	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьДанныеДокументов(МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровУслуг.Номер КАК Номер,
	               |	РеализацияТоваровУслуг.Дата КАК Дата,
	               |	РеализацияТоваровУслуг.Организация КАК Организация,
	               |	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
	               |	РеализацияТоваровУслуг.Договор КАК Договор,
	               |	РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
	               |	РеализацияТоваровУслуг.Услуги.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		Номенклатура КАК Номенклатура,
	               |		Количество КАК Количество,
	               |		Цена КАК Цена,
	               |		Сумма КАК Сумма
	               |	) КАК Услуги,
	               |	РеализацияТоваровУслуг.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |ГДЕ
	               |	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ВывестиЗаголовокАкта(ДанныеДокументов, ТабличныйДокумент, Макет)
	
	ОбластьЗаголовокДокумента = Макет.ПолучитьОбласть("ЗаголовокДокумента");
	
	ДанныеПечати = Новый Структура;
	ДанныеПечати.Вставить("НомерДокумента", ДанныеДокументов.Номер);
	ДанныеПечати.Вставить("ДатаДокумента", Формат(ДанныеДокументов.Дата, "ДЛФ=DD"));
	
	ДанныеQRКода = ГенерацияШтрихкода.ДанныеQRКода(ДанныеДокументов.Ссылка, 1, 120);
	Если НЕ ТипЗнч(ДанныеQRКода) = Тип("ДвоичныеДанные") Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось сформировать QR-код.
		|Технические подробности см. в журнале регистрации.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	Иначе
		КартинкаQRКода = Новый Картинка(ДанныеQRКода);
		ОбластьЗаголовокДокумента.Рисунки.QRКод.Картинка = КартинкаQRКода;
	КонецЕсли;
	
	ДанныеПечати.Вставить("Организация", ДанныеДокументов.Организация);
	ДанныеПечати.Вставить("Контрагент", ДанныеДокументов.Контрагент);
	ДанныеПечати.Вставить("Договор", ДанныеДокументов.Договор);
	
	ОбластьЗаголовокДокумента.Параметры.Заполнить(ДанныеПечати);
	ТабличныйДокумент.Вывести(ОбластьЗаголовокДокумента);
	
КонецПроцедуры

Процедура ВывестиОсновнуюТаблицуАкта(ДанныеДокументов, ТабличныйДокумент, Макет)
	
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
	
	ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	
	СуммаУслугИтого = 0;
	КоличествоУслугИтого = 0;
	ВыборкаУслуги = ДанныеДокументов.Услуги.Выбрать();
	Пока ВыборкаУслуги.Следующий() Цикл
		ОбластьСтрокаТаблицы.Параметры.Заполнить(ВыборкаУслуги);
		ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
		СуммаУслугИтого = СуммаУслугИтого + ВыборкаУслуги.Сумма;
		КоличествоУслугИтого = КоличествоУслугИтого + 1;
	КонецЦикла;
	
	ОбластьИтого = Макет.ПолучитьОбласть("Итого"); 
	ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
	
	СуммаПрописью = ЧислоПрописью(СуммаУслугИтого, "Л = ru_RU; ДП = Истина", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
	
	ДанныеПечати = Новый Структура;
	ДанныеПечати.Вставить("Всего", СуммаУслугИтого);
	ДанныеПечати.Вставить("Количество", КоличествоУслугИтого);
	ДанныеПечати.Вставить("Сумма", СуммаУслугИтого);
	ДанныеПечати.Вставить("СуммаПрописью", СуммаПрописью);
	
	ОбластьИтого.Параметры.Заполнить(ДанныеПечати);
	ТабличныйДокумент.Вывести(ОбластьИтого); 
	
	ОбластьСуммаПрописью.Параметры.Заполнить(ДанныеПечати);
	ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);

КонецПроцедуры

Процедура ВывестиПодвалАкта(ДанныеДокументов, ТабличныйДокумент, Макет)
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
КонецПроцедуры
//Конец ВКМ_Доработки

#КонецОбласти

#КонецЕсли